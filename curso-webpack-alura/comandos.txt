

#01 - Webpack, o agrupador de módulos
=======================================================================================

	1- client caelum$ npm run watch
	2- server caelum$ npm start

	para build
	3 - npm run build-dev

	-- client caelum$
	- remover: npm uninstall babel-cli  
	- remover: npm uninstall babel-cli --save-dev
	- remover: npm uninstall systemjs --save


	-- client caelum$
		No Terminal, digitamos o --save-dev, por se tratar de uma dependêcia de desenvolvimento. 
		Usaríamos apenas --save por ser uma dependência em tempo de produção. 
    -- instalar 
    	npm install webpack@3.1.0 babel-core@6.25.0 --save-dev

    	Aponte de ligação entre o Webpack e o babel-core é o babel-loader (https://github.com/babel/babel-loader), 
		um carregador exclusivo voltado para o Babel. Esse loader lerá nossas configurações em client/.babelrc quando for executado.
    	
    	npm install babel-loader@7.1.0 --save-dev

    -- remover
    	npm uninstall babel-plugin-transform-es2015-modules-systemjs --save-dev

	Aprendemos neste capítulo:

	O papel do webpack
	Instalação através do npm
	Configuração do webpack.config.js
	Como executar webpack através de um npm script
	O conceito de entry e output
	O papel de um loader
	Instalação e configuração de um loader



#02 - Preparando o build de produção
=======================================================================================

	Neste capítulo vimos:

	    O efeito do parâmetro -p para o build de produção.
	    A incompatibilidade do uglify com código que não sejam escritos em ECMASCRIPT 5.
	    babili como plugin que ajuda no processo de minificação.
	    pegadinhas na atribuição de variáveis de ambiente.
	    o módulos cross-env para garantir compatibilidade do nosso npm script entre diferentes sistemas operacionais.



	-- package.json ,  -p para mimificar pelo unglify
		"build-prod": "webpack -p --config webpack.config.js"

    Mimifica ECMASCRIPT 5. O Uglify, minificador embutido no webpack só teria problema caso o código 
    fosse escrito em ESCMASCRIPT 2015 (ES6) ou superior.

	-- instalar babili para compilar o ESC2015
	client caelum$ npm install babili-webpack-plugin@0.1.1 --save-dev

	-- Para garantirmos que a mudança da variável de ambiente funcionará em qualquer plataforma, pediremos a ajuda de 
	   um módulo do NodeJS. No Terminal, acessaremos a pasta projeto webpack client, depois usaremos o comando npm install para o cross-env: 

		-- install:
		client caelum$ npm install cross-env@5.0.1 --save-dev



#03 - Webpack Dev Server e configuração 
=======================================================================================
	
	Neste capítulo vimos:

	    O papel do Webpack Dev Server e suas vantagens como live reloading
	    Como instalar o Webpack Dev Server através do npm
	    A criação de um script para executar o servidor
	    A importância da propriedade publicPath. 


	Para trabalharmos em ambiente de desenvolvimento, quero usar um servidor que se integre com o Webpack, 
	desta forma, não precisaremos criar um servidor próprio para tornar acessível nosso projeto. 

	-- Instalação e configuração
		client caelum$ npm install webpack-dev-server@2.5.1 --save-dev

		-- package.json
		-- "start": "webpack-dev-server"
		npm start


#04 - Tratando arquivos CSS como módulos 
=======================================================================================
	-- Utilizando o npm para gerenciar dependências front-end


 -- Pergunta
	Podemos usar o npm da própria plataforma Node.js para gerenciar as dependências de frontend da nossa aplicação. 
	Nesse sentido, Webpack será o responsável pelo carregamento dessas dependências adicionando-as no bundle da aplicação.

		Exato. Quem gerencia as dependências é o npm, o Webpack apenas permitirá adicioná-las ao bundle da aplicação 
		tratando-os como módulos, contato que haja um loader configurado para lidar com o tipo de arquivo em questão.

 -- loaders para trabalhar com css do boostrap

 	client$ npm install css-loader@0.28.4 style-loader@0.18.2 --save-dev

 	  -- css-loader faz o seguinte: vai ler todo css e vai transformar em json um objeto javascript
 	  -- style-loader vai pegar essa informacao desse objto josn vai transformar em line para p navegador

		{ 
			test: /\.css$/, 
			loader: 'style-loader!css-loader' 
		}

-- loader para trabalhar fonts do bootstrap

	Neste capítulo vimos:

	    Como utilizar o npm para gerenciar nossas dependências frontend
	    Como o Webpack lida com as dependências em node_modules adicionado-as no bundle da aplicação.
	    O papel de loaders
	    Que o padrão é adicionar no bundle scripts e CSS's
	    Que podemos separar CSS's do bundle criado e importá-los através da tag link através do módulo extract-text-webpack-plugin.
	    A utilizar o plugin optimize-css-assets-webpack-plugin para minificar CSS's importados se adicionados no style.css. 




	Nós utilizaremos dois loaders documentados no Webpack: url-loader e file-loader. 
	
	Esse dois loaders trabalharão em conjunto porque o url-loader vai ver a url e extrair a fonte, em seguida, 
	irá copiá-la para o local apropriado. Porém, algumas fontes receberão um tratamento especial, por isso, a 
	necessidade do file-loader. Nós criaremos no webpack.config.js várias regras para lidar com diferentes tipos 
	de fontes utilizadas. Esse tipo de configuração é facilmente encontrada por quem trabalha com o Webpack e bootstrap, 
	você irá encontrá-la logo abaixo:
	
	client$ npm install url-loader@0.5.9 file-loader@0.11.2 --save-dev

	---
	webpack.config.js

	{ 
        test: /\.(woff|woff2)(\?v=\d+\.\d+\.\d+)?$/, 
        loader: 'url-loader?limit=10000&mimetype=application/font-woff' 
    },
    { 
        test: /\.ttf(\?v=\d+\.\d+\.\d+)?$/, 
        loader: 'url-loader?limit=10000&mimetype=application/octet-stream'
    },
    { 
        test: /\.eot(\?v=\d+\.\d+\.\d+)?$/, 
        loader: 'file-loader' 
    },
    { 
        test: /\.svg(\?v=\d+\.\d+\.\d+)?$/, 
        loader: 'url-loader?limit=10000&mimetype=image/svg+xml' 
    } 

    Entre as fontes trabalhadas estão: woff, ttf, eot e svg. Algumas usarão url-loader, enquanto outras usarão file-loader, 
    tratam-se de experessões regulares um tanto elabordas, mas já são bastante utilizadas. 


    Porém, durante o processo de build, o Webpack conseguirá separá-los, deixando os arquivos 
    JavaScript dentro do bundle.js. Desta forma, resolveremos com o FOUC. Após adicionarmos <link>,
    acessaremos o Terminal para instalar o extract-text-webpack-plugin: 

    	client$ npm install extract-text-webpack-plugin@3.0.0 --save-dev

    -- important
    FOUC significa flash of unstyled content. É quando há um hiato entre o carregamento do CSS e sua aplicação na página, 
    permitindo que o usuário veja a página sem estar estilizada durante um breve tempo.

    	client$ npm install optimize-css-assets-webpack-plugin@2.0.0 --save-dev
		client$ npm install cssnano@3.10.0 --save-dev



#05 - Importando scripts 
=======================================================================================

	Neste capítulo vimos:
	    Que o Webpack importa scripts através da instrução import sem muito mistério.
	    A necessidade de utilizar o webpack.ProvidePlugin.

	-- install Jquery
		client$	npm install jquery@3.2.1 --save


#06 - 	Boas práticas  
=======================================================================================

	* 05 - Gerando a página principal automaticamente
	client$ npm install html-webpack-plugin@2.29.0 --save-dev