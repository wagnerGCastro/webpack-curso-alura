

#01 - Webpack, o agrupador de módulos
=======================================================================================

	1- client caelum$ npm run watch
	2- server caelum$ npm start

	para build
	3 - npm run build-dev

	-- client caelum$
	- remover: npm uninstall babel-cli  
	- remover: npm uninstall babel-cli --save-dev
	- remover: npm uninstall systemjs --save


	-- client caelum$
		No Terminal, digitamos o --save-dev, por se tratar de uma dependêcia de desenvolvimento. 
		Usaríamos apenas --save por ser uma dependência em tempo de produção. 
    -- instalar 
    	npm install webpack@3.1.0 babel-core@6.25.0 --save-dev

    	Aponte de ligação entre o Webpack e o babel-core é o babel-loader (https://github.com/babel/babel-loader), 
		um carregador exclusivo voltado para o Babel. Esse loader lerá nossas configurações em client/.babelrc quando for executado.
    	
    	npm install babel-loader@7.1.0 --save-dev

    -- remover
    	npm uninstall babel-plugin-transform-es2015-modules-systemjs --save-dev

	Aprendemos neste capítulo:

	O papel do webpack
	Instalação através do npm
	Configuração do webpack.config.js
	Como executar webpack através de um npm script
	O conceito de entry e output
	O papel de um loader
	Instalação e configuração de um loader



#02 - Preparando o build de produção
=======================================================================================

	Neste capítulo vimos:

	    O efeito do parâmetro -p para o build de produção.
	    A incompatibilidade do uglify com código que não sejam escritos em ECMASCRIPT 5.
	    babili como plugin que ajuda no processo de minificação.
	    pegadinhas na atribuição de variáveis de ambiente.
	    o módulos cross-env para garantir compatibilidade do nosso npm script entre diferentes sistemas operacionais.



	-- package.json ,  -p para mimificar pelo unglify
		"build-prod": "webpack -p --config webpack.config.js"

    Mimifica ECMASCRIPT 5. O Uglify, minificador embutido no webpack só teria problema caso o código 
    fosse escrito em ESCMASCRIPT 2015 (ES6) ou superior.

	-- instalar babili para compilar o ESC2015
	client caelum$ npm install babili-webpack-plugin@0.1.1 --save-dev

	-- Para garantirmos que a mudança da variável de ambiente funcionará em qualquer plataforma, pediremos a ajuda de 
	   um módulo do NodeJS. No Terminal, acessaremos a pasta projeto webpack client, depois usaremos o comando npm install para o cross-env: 

		-- install:
		client caelum$ npm install cross-env@5.0.1 --save-dev


